"""
Создание качественного датасета для обучения sentiment модели
"""
import pandas as pd
import numpy as np
from pathlib import Path
import random
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
import joblib

# Пути
DATA_DIR = Path("data")
PROCESSED_DIR = DATA_DIR / "processed"
MODELS_DIR = Path("models")

# Создаем директории
PROCESSED_DIR.mkdir(parents=True, exist_ok=True)
MODELS_DIR.mkdir(parents=True, exist_ok=True)

def create_sentiment_dataset(num_samples=50000):
    """Создание разнообразного датасета"""
    print(f"🔄 Создание датасета из {num_samples} примеров...")
    
    data = []
    
    # ПОЗИТИВНЫЕ ПРИМЕРЫ - расширенный набор
    positive_templates = [
        # Отзывы о товарах
        "Отличный товар! Очень доволен!",
        "Супер качество, всем рекомендую!",
        "Потрясающе! Превзошло все ожидания!",
        "Лучшая покупка за последнее время!",
        "Великолепно! Буду заказывать еще!",
        "Рекомендую! Отличное качество!",
        "Очень рад покупке! Спасибо!",
        "Прекрасный выбор! Все супер!",
        "Шикарный товар! Просто класс!",
        "Восхитительно! Именно то что нужно!",
        "Замечательная вещь! Очень доволен!",
        "Превосходно! Качество на высоте!",
        "Идеально! Полностью соответствует описанию!",
        "Браво! Отличная работа!",
        "Чудесно! Все работает прекрасно!",
        
        # Эмоциональные
        "Я так счастлив! Все получилось!",
        "Какой чудесный день! Все отлично!",
        "Это просто праздник какой-то!",
        "Невероятно! Я в полном восторге!",
        "Ура! Наконец-то все получилось!",
        "Фантастика! Мечты сбываются!",
        "Обожаю! Это просто супер!",
        "Класс! Все прошло отлично!",
        "Молодцы! Так держать!",
        "Вау! Это нечто невероятное!",
        "Прекрасные новости! Я так рад!",
        "Отличное настроение! Все супер!",
        "Радость! Счастье! Восторг!",
        "Потрясающий результат! Браво!",
        "Успех! Все получилось как надо!",
        
        # Благодарности
        "Спасибо огромное! Очень благодарен!",
        "Благодарю за отличный сервис!",
        "Вы лучшие! Большое спасибо!",
        "Признателен за помощь! Спасибо!",
        "Благодарность за прекрасную работу!",
        "Спасибо за качество и скорость!",
        "Огромная благодарность! Вы молодцы!",
        "Спасибо за профессионализм!",
        "Благодарен за внимание к деталям!",
        "Спасибо что вы есть! Супер!",
    ]
    
    # НЕГАТИВНЫЕ ПРИМЕРЫ
    negative_templates = [
        # Жалобы на товары
        "Ужасный товар! Полное разочарование!",
        "Кошмар! Не покупайте это!",
        "Полный провал! Деньги на ветер!",
        "Худшая покупка в моей жизни!",
        "Отвратительно! Верните деньги!",
        "Никому не советую! Ужасно!",
        "Зря потратил деньги! Мусор!",
        "Обман! Не соответствует описанию!",
        "Катастрофа! Все сломалось сразу!",
        "Барахло, а не товар! Ужас!",
        "Полная ерунда! Не работает!",
        "Брак! Требую возврат денег!",
        "Кошмарное качество! Позор!",
        "Хлам! Выброшенные деньги!",
        "Ужасно! Хуже не видел!",
        
        # Негативные эмоции
        "Я так расстроен! Все плохо!",
        "Ужасный день! Все валится из рук!",
        "Кошмар! Ничего не получается!",
        "Катастрофа! Я в полном отчаянии!",
        "Провал! Все пошло не так!",
        "Это просто ад какой-то!",
        "Невыносимо! Сил больше нет!",
        "Отвратительно! Настроение испорчено!",
        "Жуть! Полный крах надежд!",
        "Беда! Все разваливается!",
        "Печально! Очень разочарован!",
        "Грустно! Ничего не радует!",
        "Плохо! Все идет наперекосяк!",
        "Ужасно себя чувствую! Все плохо!",
        "Кризис! Не знаю что делать!",
        
        # Критика и недовольство
        "Ужасное обслуживание! Хамы!",
        "Отвратительный сервис! Позор!",
        "Некомпетентные сотрудники! Кошмар!",
        "Грубость и непрофессионализм!",
        "Безобразие! Так нельзя работать!",
        "Возмутительно! Требую компенсацию!",
        "Недопустимо! Буду жаловаться!",
        "Скандал! Это просто безобразие!",
        "Неприемлемо! Верните деньги!",
        "Позорище! Никому не рекомендую!",
    ]
    
    # НЕЙТРАЛЬНЫЕ ПРИМЕРЫ
    neutral_templates = [
        # Описательные
        "Обычный товар, ничего особенного",
        "Нормально, есть плюсы и минусы",
        "Средний продукт, как у всех",
        "Пойдет, но есть варианты получше",
        "Стандартный вариант за свои деньги",
        "Ничего выдающегося, но работает",
        "Соответствует описанию, без сюрпризов",
        "Обычное качество, обычная цена",
        "Как и ожидалось, ни больше ни меньше",
        "Нормальный товар, свои функции выполняет",
        "Приемлемо для своей категории",
        "Неплохо, но можно найти лучше",
        "Средненько, на троечку с плюсом",
        "Удовлетворительно, без восторгов",
        "Типичный продукт, каких много",
        
        # Информативные
        "Доставка заняла три дня",
        "Упаковка стандартная, без повреждений",
        "Размер соответствует заявленному",
        "Цвет как на картинке",
        "Инструкция на русском языке",
        "Гарантия один год от производителя",
        "В комплекте все что указано",
        "Работает от сети и от батареек",
        "Материал пластик, как и написано",
        "Вес примерно как указано",
        
        # Сравнительные
        "Похож на аналоги других брендов",
        "Не хуже и не лучше конкурентов",
        "Обычный вариант в своем сегменте",
        "Как у всех, ничего нового",
        "Стандартное решение стандартных задач",
        "Альтернатива есть, но и это пойдет",
        "Можно брать, можно поискать другое",
        "Сойдет для нетребовательных",
        "Середнячок в своей категории",
        "Один из многих похожих вариантов",
    ]
    
    # Генерация данных
    samples_per_class = num_samples // 3
    
    # Позитивные с вариациями
    for _ in range(samples_per_class):
        text = random.choice(positive_templates)
        # Добавляем случайные вариации
        if random.random() > 0.7:
            text = text.upper()  # Иногда КАПСОМ для эмоций
        elif random.random() > 0.5:
            text += " " + random.choice(["😊", "😄", "👍", "❤️", "🎉", "✨", "🙌", "💯"])
        data.append({"text": text, "label": "positive"})
    
    # Негативные с вариациями
    for _ in range(samples_per_class):
        text = random.choice(negative_templates)
        if random.random() > 0.7:
            text = text.lower()  # иногда без заглавных для уныния
        elif random.random() > 0.5:
            text += " " + random.choice(["😔", "😡", "😢", "💔", "👎", "😞", "🤬", "😤"])
        data.append({"text": text, "label": "negative"})
    
    # Нейтральные
    for _ in range(num_samples - 2 * samples_per_class):
        text = random.choice(neutral_templates)
        data.append({"text": text, "label": "neutral"})
    
    # Перемешиваем
    random.shuffle(data)
    return pd.DataFrame(data)

# Создаем датасет
print("🚀 Создание качественного датасета для обучения...")
print("="*60)

df = create_sentiment_dataset(50000)

print(f"\n📊 Статистика датасета:")
print(df['label'].value_counts())
print(f"\nВсего уникальных слов: {len(' '.join(df['text']).split())}")

# Добавляем колонки для совместимости
df['processed_text'] = df['text']  # В реальности здесь была бы предобработка

# Label encoding
label_encoder = LabelEncoder()
df['label_encoded'] = label_encoder.fit_transform(df['label'])

# Разделение на train/test
train_df, test_df = train_test_split(
    df,
    test_size=0.2,
    random_state=42,
    stratify=df['label']
)

# Сохранение данных
print(f"\n💾 Сохранение данных...")
train_df.to_csv(PROCESSED_DIR / "train_data.csv", index=False)
test_df.to_csv(PROCESSED_DIR / "test_data.csv", index=False)

# Сохранение label encoder
joblib.dump(label_encoder, PROCESSED_DIR / "label_encoder.pkl")
joblib.dump(label_encoder, MODELS_DIR / "label_encoder_gpu.pkl")

print(f"\n✅ Данные сохранены:")
print(f"   📁 {PROCESSED_DIR}/")
print(f"      - train_data.csv ({len(train_df)} примеров)")
print(f"      - test_data.csv ({len(test_df)} примеров)")
print(f"      - label_encoder.pkl")

print(f"\n📊 Пример данных:")
print(train_df.head())

print("\n✅ Датасет готов для обучения модели!")
print("\nТеперь можно запустить обучение:")
print("   python production_train.py")