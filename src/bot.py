"""
–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π
"""
import logging
import asyncio
from datetime import datetime
from typing import Dict
import json

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)

from config import TELEGRAM_TOKEN, LOGGING_CONFIG
from predictor import SentimentPredictor


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(**LOGGING_CONFIG)
logger = logging.getLogger(__name__)


class SentimentBot:
    """–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"""
    
    def __init__(self):
        self.predictor = SentimentPredictor()
        self.user_stats = {}  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_message = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
            "–Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–∫—Ä–∞—Å–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤. "
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏ —è –æ–ø—Ä–µ–¥–µ–ª—é –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:\n\n"
            "üòä –ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ\n"
            "üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ\n"
            "üò¢ –ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n"
            "/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/examples - –ü—Ä–∏–º–µ—Ä—ã –∞–Ω–∞–ª–∏–∑–∞\n"
            "/about - –û –±–æ—Ç–µ"
        )
        
        await update.message.reply_text(welcome_message)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user.id not in self.user_stats:
            self.user_stats[user.id] = {
                'total_messages': 0,
                'sentiments': {'positive': 0, 'neutral': 0, 'negative': 0},
                'first_use': datetime.now().isoformat()
            }
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "üìñ **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:**\n\n"
            "1. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "2. –ë–æ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É\n"
            "3. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —É—Ä–æ–≤–Ω–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏\n\n"
            "**–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:**\n"
            "‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (–ø–æ–∑–∏—Ç–∏–≤/–Ω–µ–π—Ç—Ä–∞–ª/–Ω–µ–≥–∞—Ç–∏–≤)\n"
            "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏\n"
            "‚Ä¢ –í–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã\n\n"
            "**–°–æ–≤–µ—Ç—ã:**\n"
            "‚Ä¢ –ü–∏—à–∏—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ\n"
            "‚Ä¢ –ß–µ–º –¥–ª–∏–Ω–Ω–µ–µ —Ç–µ–∫—Å—Ç, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –∞–Ω–∞–ª–∏–∑\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫"
        )
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        user_id = update.effective_user.id
        
        if user_id not in self.user_stats or self.user_stats[user_id]['total_messages'] == 0:
            await update.message.reply_text(
                "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!"
            )
            return
        
        stats = self.user_stats[user_id]
        total = stats['total_messages']
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        percentages = {}
        for sentiment, count in stats['sentiments'].items():
            percentages[sentiment] = (count / total * 100) if total > 0 else 0
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        dominant = max(stats['sentiments'], key=stats['sentiments'].get)
        dominant_emoji = {'positive': 'üòä', 'neutral': 'üòê', 'negative': 'üò¢'}[dominant]
        
        stats_text = (
            f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n"
            f"üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total}\n"
            f"üìÖ –ü–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {stats['first_use'][:10]}\n\n"
            f"**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π:**\n"
            f"üòä –ü–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö: {stats['sentiments']['positive']} ({percentages['positive']:.1f}%)\n"
            f"üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö: {stats['sentiments']['neutral']} ({percentages['neutral']:.1f}%)\n"
            f"üò¢ –ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö: {stats['sentiments']['negative']} ({percentages['negative']:.1f}%)\n\n"
            f"**–í–∞—à–µ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:** {dominant_emoji}"
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        keyboard = [[InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="reset_stats")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            stats_text, 
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    async def examples_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /examples"""
        examples = [
            ("–°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –¥–µ–Ω—å! –í—Å–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è!", "positive"),
            ("–û–±—ã—á–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å, –Ω–∏—á–µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ", "neutral"),
            ("–í—Å–µ –ø–ª–æ—Ö–æ, –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "negative")
        ]
        
        examples_text = "üìù **–ü—Ä–∏–º–µ—Ä—ã –∞–Ω–∞–ª–∏–∑–∞:**\n\n"
        
        for text, expected in examples:
            result = self.predictor.predict(text)
            examples_text += (
                f"–¢–µ–∫—Å—Ç: _{text}_\n"
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result['emoji']} {result['sentiment_ru']} "
                f"(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.0%})\n\n"
            )
        
        keyboard = [[InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–≤–æ–π —Ç–µ–∫—Å—Ç", callback_data="try_analysis")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            examples_text, 
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    async def about_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /about"""
        about_text = (
            "ü§ñ **–û –±–æ—Ç–µ:**\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ "
            "—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–∫—Ä–∞—Å–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.\n\n"
            "**–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:**\n"
            "‚Ä¢ TensorFlow –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è\n"
            "‚Ä¢ LSTM –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –≤–Ω–∏–º–∞–Ω–∏—è\n"
            "‚Ä¢ –û–±—É—á–µ–Ω –Ω–∞ –±–æ–ª—å—à–æ–º –∫–æ—Ä–ø—É—Å–µ —Ä—É—Å—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤\n"
            "‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è > 85%\n\n"
            "**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**\n"
            "‚Ä¢ –£—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ –ü–æ–Ω–∏–º–∞–µ—Ç —Å–∞—Ä–∫–∞–∑–º –∏ –∏—Ä–æ–Ω–∏—é\n"
            "‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –ª—é–±–æ–π –¥–ª–∏–Ω—ã\n"
            "‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ —É–ª—É—á—à–∞–µ—Ç—Å—è\n\n"
            "–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"
        )
        
        await update.message.reply_text(about_text, parse_mode='Markdown')
    
    async def analyze_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        message_text = update.message.text
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id, 
            action="typing"
        )
        
        try:
            # –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
            result = self.predictor.predict(message_text)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if user_id in self.user_stats:
                self.user_stats[user_id]['total_messages'] += 1
                self.user_stats[user_id]['sentiments'][result['sentiment']] += 1
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            confidence_level = self.predictor.get_confidence_level(result['confidence'])
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            confidence_bar = self._create_confidence_bar(result['confidence'])
            
            response = (
                f"**–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è:**\n\n"
                f"üìù _–í–∞—à —Ç–µ–∫—Å—Ç:_ {message_text[:100]}{'...' if len(message_text) > 100 else ''}\n\n"
                f"**–†–µ–∑—É–ª—å—Ç–∞—Ç:**\n"
                f"{result['emoji']} –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: **{result['sentiment_ru']}**\n"
                f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.0%} ({confidence_level})\n"
                f"{confidence_bar}\n\n"
                f"**–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:**\n"
                f"‚Ä¢ –ü–æ–∑–∏—Ç–∏–≤: {result['probabilities']['positive']:.1%}\n"
                f"‚Ä¢ –ù–µ–π—Ç—Ä–∞–ª: {result['probabilities']['neutral']:.1%}\n"
                f"‚Ä¢ –ù–µ–≥–∞—Ç–∏–≤: {result['probabilities']['negative']:.1%}"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if result['sentiment'] == 'positive' and result['confidence'] > 0.8:
                response += "\n\n‚ú® –û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"
            elif result['sentiment'] == 'negative' and result['confidence'] > 0.8:
                response += "\n\nüíô –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!"
            elif confidence_level == "–ù–∏–∑–∫–∞—è":
                response += "\n\nü§î –°–ª–æ–∂–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–º"
            
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            keyboard = [
                [
                    InlineKeyboardButton("üëç", callback_data=f"feedback_correct_{result['sentiment']}"),
                    InlineKeyboardButton("üëé", callback_data=f"feedback_wrong_{result['sentiment']}")
                ],
                [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                response, 
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    def _create_confidence_bar(self, confidence: float) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        filled = int(confidence * 10)
        empty = 10 - filled
        return f"[{'‚ñà' * filled}{'‚ñë' * empty}]"
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "reset_stats":
            user_id = update.effective_user.id
            self.user_stats[user_id] = {
                'total_messages': 0,
                'sentiments': {'positive': 0, 'neutral': 0, 'negative': 0},
                'first_use': datetime.now().isoformat()
            }
            await query.edit_message_text("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞!")
            
        elif query.data == "try_analysis":
            await query.edit_message_text(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! üîç"
            )
            
        elif query.data == "show_stats":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã
            await query.message.delete()
            await self.stats_command(update, context)
            
        elif query.data.startswith("feedback_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            feedback_type = query.data.split("_")[1]
            sentiment = query.data.split("_")[2]
            
            if feedback_type == "correct":
                await query.edit_message_reply_markup(reply_markup=None)
                await query.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ! –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç —É–ª—É—á—à–∏—Ç—å –±–æ—Ç–∞.")
            else:
                await query.edit_message_reply_markup(reply_markup=None)
                await query.message.reply_text(
                    "üìù –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –ú—ã —É—á—Ç–µ–º —ç—Ç–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.\n"
                    "–ö–∞–∫–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞?"
                )
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Update {update} caused error {context.error}")
        
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if not TELEGRAM_TOKEN:
        logger.error("Telegram token –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
    bot = SentimentBot()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("help", bot.help_command))
    application.add_handler(CommandHandler("stats", bot.stats_command))
    application.add_handler(CommandHandler("examples", bot.examples_command))
    application.add_handler(CommandHandler("about", bot.about_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.analyze_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(bot.button_callback))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(bot.error_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()